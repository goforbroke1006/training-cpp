//
// Created by goforbroke on 02.04.2023.
//

#include <iostream>
#include <ostream>
#include <vector>

#include <chrono>

#include "homework.h"
#include "../complexity.h"

std::ostream &operator<<(std::ostream &os, const std::vector<size_t> &spans);

std::vector<size_t> SimpleStockSpan(const std::vector<int> &quotes);

std::vector<size_t> StackStockSpan(const std::vector<int> &quotes);

const size_t BENCHMARK_N = 10000;

int main() {
//    std::vector<int> quotes = {7, 10, 8, 6, 3, 8, 9};
//    std::vector<int> quotes = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
    std::vector<int> quotes = {
            5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4, 4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8,
            7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1, 4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9,
            5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5, 6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2,
            111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1, 2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2,
            5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5, 2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2,
            1, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5, 6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2,
            111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1, 2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2,
            5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5, 2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2,
            1, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
            5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4, 4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8,
            7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1, 4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9,
            5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5, 6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2,
            111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1, 2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2,
            5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5, 2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2,
            1, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2, 1, 5, 8, 4, 6, 9, 8, 2, 4, 6, 5, 7, 3, 2, 1, 5, 6, 8, 4,
            4, 4, 1, 2, 3, 2, 1, 2, 5, 4, 5, 1, 4, 2, 3, 69, 5, 8, 7, 4, 1, 2, 3, 3, 6, 5, 1, 1, 1, 1, 2, 5, 5, 5, 5, 1,
            4, 2, 2, 2, 4, 1, 1, 1, 2, 1, 2, 2, 2, 5, 5, 8, 8, 9, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,
            3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5, 5, 6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2,
            111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1, 2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2,
            5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5, 2, 2, 1, 1, 5, 4, 2, 2, 1, 5, 56, 8, 7, 4, 5, 6, 2,
            1, 5, 6, 5, 9, 9, 5, 4, 5, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 3, 3, 3, 5, 5, 5, 1, 2, 3, 3, 2, 2, 2, 1, 44, 5,
            6, 6, 6, 9, 9, 9, 8, 8, 7, 7, 4, 1, 2, 5, 5, 5, 2, 2, 111, 5, 88, 5, 8, 8, 8, 4, 4, 5, 5, 4, 2, 1, 4, 5, 1,
            2, 2, 1, 4, 5, 55, 1, 1, 2, 2, 2, 5, 1, 2, 2, 4, 1, 2, 5, 5, 1, 1, 2, 3, 2, 1, 2, 3, 2, 1, 5, 4, 7, 8, 9, 5,
    };

    std::cout << "Benchmark:" << std::endl
              << "  Repeats:   " << BENCHMARK_N << std::endl
              << "  Input len: " << quotes.size() << std::endl;

    {
        auto start = std::chrono::high_resolution_clock::now();
        for (size_t idx = 0; idx < BENCHMARK_N; ++idx) {
            const auto &spans1 = SimpleStockSpan(quotes);
        }
        auto finish = std::chrono::high_resolution_clock::now();
        std::cout << "SimpleStockSpan: "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count() << " ms"
                  << std::endl;
    }

    {
        auto start = std::chrono::high_resolution_clock::now();
        for (size_t idx = 0; idx < BENCHMARK_N; ++idx) {
            const auto &spans1 = StackStockSpan(quotes);
        }
        auto finish = std::chrono::high_resolution_clock::now();
        std::cout << "StackStockSpan:  "
                  << std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count() << " ms"
                  << std::endl;
    }

//    ComplexityStat::get()->init(quotes.size());
//    const auto &spans1 = SimpleStockSpan(quotes);
//    std::cout << spans1 << std::endl;
//    ComplexityStat::get()->print();
//
//    ComplexityStat::get()->init(quotes.size());
//    const auto &spans2 = StackStockSpan(quotes);
//    std::cout << spans2 << std::endl;
//    ComplexityStat::get()->print();

    return 0;
}

std::ostream &operator<<(std::ostream &os, const std::vector<size_t> &spans) {
    os << "[ ";
    for (const auto &s: spans) {
        os << s << ", ";
    }
    os << "]";
    return os;
}

std::vector<size_t> SimpleStockSpan(const std::vector<int> &quotes) {
    std::vector<size_t> spans;

    for (size_t idx = 0; idx < quotes.size(); ++idx) {
        ComplexityStat::get()->addTime("loop::outer");

        size_t k = 1;
        bool spanEnd = false;

        while (idx >= k && !spanEnd) {
            ComplexityStat::get()->addTime("loop::inner");

            if (quotes.at(idx - k) <= quotes[idx])
                ++k;
            else
                spanEnd = true;
        }
        spans.push_back(k);
    }

    return spans;
}

std::vector<size_t> StackStockSpan(const std::vector<int> &quotes) {
    std::vector<size_t> spans;
    spans.reserve(quotes.size());
    spans.push_back(1);

    StackOnArray<size_t> s;
    s.push(0);

    for (size_t idx = 1; idx < quotes.size(); ++idx) {
        while (!s.empty() && quotes[s.top()] <= quotes[idx]) {
            ComplexityStat::get()->addTime("stack::pop");
            s.pop();
        }

        size_t spanPos = 0;
        if (s.empty())
            spanPos = idx + 1;
        else
            spanPos = idx - s.top();

        spans.push_back(spanPos);

        s.push(idx);
        ComplexityStat::get()->addTime("stack::push");
    }

    return spans;
}